"use client";

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Navigation } from "@/components/Navigation";
import { FloatingActionButton } from "@/components/FloatingActionButton";
import { BookMinus, BookPlus, ClipboardList } from "lucide-react";
import { useState } from "react";
import { JournalEntryModal } from "@/components/JournalEntryModal";
import { Toaster } from "@/components/ui/sonner";
import { Header } from "@/components/Header";
import { AuthGuard } from "@/components/AuthGuard";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Note: Metadata is still supported in client components
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // 1. Add state to control the modal's visibility
  // const [isModalOpen, setIsModalOpen] = useState(false);

  // 2. Update the actions array to use the state setter
  // const actions = [
  //   {
  //     icon: ClipboardList,
  //     label: "Novo Lançamento",
  //     onClick: () => setIsModalOpen(true), // This opens the modal
  //     className:
  //       "bg-blue-50 text-blue-600 dark:bg-blue-900/50 dark:text-blue-300",
  //   },
  //   {
  //     icon: BookPlus,
  //     label: "Adicionar Conta Contábil",
  //     onClick: () => console.log("Adicionar Conta Contábil"),
  //     className:
  //       "bg-green-50 text-green-600 dark:bg-green-900/50 dark:text-green-300",
  //   },
  //   {
  //     icon: BookMinus,
  //     label: "Excluir Conta Contábil",
  //     onClick: () => console.log("Excluir Conta Contábil"),
  //     className: "bg-red-50 text-red-600 dark:bg-red-900/50 dark:text-red-300",
  //   },
  // ];

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthGuard>
          <Header />
          {/* <Navigation /> */}
          <main>{children}</main>
          <Toaster />
        </AuthGuard>
        {/* 3. Pass the updated actions to the FAB */}
        {/* <FloatingActionButton
          items={actions}
          size="sm"
          position="bottom-right"
          startAngle={180}
          endAngle={270}
        /> */}

        {/* 4. Render the modal and pass state to control it */}
        {/* <JournalEntryModal isOpen={isModalOpen} onOpenChange={setIsModalOpen} /> */}
      </body>
    </html>
  );
}
